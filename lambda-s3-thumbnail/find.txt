AWS lambda와 S3 트리거를 이용하여 이미지 썸네일 만들기(resize)
AWS 자습서 : https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/with-s3-tutorial.html

A. AWS S3 bucket 생성
(1) bucket-resize-before
(2) bucket-resize-after
-> before bucket에 업로드 한 이미지를 트리거를 통해 lambda function에서 이미지 썸네일을 만들고 after bucket에 저장한다.

B. 역할 생성하기(For Lambda function)
자습서에 나와있는 LambdaS3Policy가 없다.
-> AWSLambda_FullAccess, AmazonS3ObjectLambdaExecutionRolePolicy, AmazonS3FullAccess 이 세 정책을 추가한 role을 만든다.

C. Lambda Function 생성
(1) 런타임 : python 3.11, x86_64로 생성, 역할은 B에서 제작한 역할 지정
(2) 코드는 .zip파일로 업로드
    - 로컬에서 package 폴더 생성
    - 아래와 같은 코드 실행(package directory에 저장됨)

pip install \
--platform manylinux2014_x86_64 \
--target=package \
--implementation cp \
--python-version 3.11 \
--only-binary=:all: --upgrade \
pillow boto3

    - urllib 관련 폴더 삭제 -> boto3, python 3.11과 호환 안됨
    - lambda_funtion.py와 package 압축 -> .zip파일 업로드
(3) 함수 테스트
    - lambda_funtion에서 제공하는 test 실행
    - 잘 된다면 실제로 S3 bucket에 이미지 업로드 후 after 버킷 확인


자습서와 다른 점(어려웠던 점)
1. lambda-s3 역할 정책이 바뀌면서 자습서에 나온 정책이 지금은 없다. 그래서 AWSLambda_FullAccess, AmazonS3ObjectLambdaExecutionRolePolicy, AmazonS3FullAccess 정책으로
진행하였음.
2. python 3.11버전으로 하려면 라이브러리도 이에 맞춰서 진행을 해야함. 기존 자습서의 코드는 python 3.9버전 기준이며, 구버전 호환이 안되는 라이브러리도 존재함.
3. python코드에서 uuid랑 urllib를 아예 빼버리고, 직접 directory 주소를 조작했음
4. download_path, upload_path가 아니라 download_file, upload_file을 사용해서 이미지를 직접 다운하고 업로드 하는 과정으로 진행
(Bucket이 달라서 path가 통일이 안되어있기 때문)